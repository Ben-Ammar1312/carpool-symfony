image: jakzal/phpqa:php8.2 # A pre-built image containing many QA tools

stages:
  - security
  - coding_standards
  - test
  - build
  - deploy
  - sonar

cache:
  paths:
    - vendor/

before_script:
  # Install dependencies
  - composer install --no-interaction --no-progress --prefer-dist

security_check:
  stage: security
  script:
    # Check for known vulnerabilities in dependencies
    - composer audit
  allow_failure: false
  only:
    - merge_requests
    - main

phpcs:
  stage: coding_standards
  script:
    # Check coding standards against PSR12, ignoring Kernel.php if needed
    - phpcs -v --standard=PSR12 --ignore=./src/Kernel.php ./src
  allow_failure: false
  only:
    - merge_requests
    - main

phpstan:
  stage: coding_standards
  script:
    # Static analysis
    - phpstan analyse src
  allow_failure: false
  only:
    - merge_requests
    - main

twig_lint:
  stage: coding_standards
  script:
    # Check Twig templates
    - twig-lint lint ./templates
  allow_failure: false
  only:
    - merge_requests
    - main

phpunit:
  stage: test
  image: php:8.2-apache
  services:
    - name: mysql:8.0
      alias: mysql
  variables:
    MYSQL_ROOT_PASSWORD: pass_test
    MYSQL_DATABASE: myapptest
    MYSQL_USER: myapptest
    MYSQL_PASSWORD: myapptest
    DATABASE_URL: "mysql://root:pass_test@mysql:3306/myapptest"
  before_script:
    - apt-get update && apt-get install -y git libzip-dev
    - curl -sS https://getcomposer.org/installer | php -- --disable-tls && mv composer.phar /usr/local/bin/composer
    - docker-php-ext-install pdo_mysql zip
    - composer install --no-interaction --no-progress --prefer-dist
    - php bin/console doctrine:database:drop --if-exists --force --env=test
    - php bin/console doctrine:database:create --env=test
    - php bin/console doctrine:migrations:migrate --env=test --no-interaction
  script:
    - php bin/phpunit --testdox
  only:
    - merge_requests
    - main

build_image:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    # Login to Docker registry and build image
    - docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD
    - docker build -t $DOCKER_HUB_USERNAME/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA .
    - docker push $DOCKER_HUB_USERNAME/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA
  only:
    - main

deploy_image:
  stage: deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    # On successful pipeline on main, tag and push as 'latest'
    - docker login -u $DOCKER_HUB_USERNAME -p $DOCKER_HUB_PASSWORD
    - docker pull $DOCKER_HUB_USERNAME/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA
    - docker tag $DOCKER_HUB_USERNAME/$CI_PROJECT_NAME:$CI_COMMIT_SHORT_SHA $DOCKER_HUB_USERNAME/$CI_PROJECT_NAME:latest
    - docker push $DOCKER_HUB_USERNAME/$CI_PROJECT_NAME:latest
  only:
    - main

sonar_analysis:
  stage: sonar
  image: sonarsource/sonar-scanner-cli:latest
  script:
    # Replace SONAR_HOST_URL and SONAR_TOKEN with GitLab variables
    - sonar-scanner -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_TOKEN -Dsonar.projectKey=$CI_PROJECT_NAME
  only:
    - merge_requests
    - main